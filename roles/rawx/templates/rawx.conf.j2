# {{ ansible_managed }}
LoadModule mpm_worker_module   {{ rawx_httpd_moduledir }}/mod_mpm_worker.so
LoadModule authz_core_module   {{ rawx_httpd_moduledir }}/mod_authz_core.so
LoadModule dav_module          {{ rawx_httpd_moduledir }}/mod_dav.so
LoadModule mime_module         {{ rawx_httpd_moduledir }}/mod_mime.so
LoadModule dav_rawx_module     {{ rawx_httpd_moduledir }}/mod_dav_rawx.so
LoadModule setenvif_module     {{ rawx_httpd_moduledir }}/mod_setenvif.so
LoadModule alias_module        {{ rawx_httpd_moduledir }}/mod_alias.so
LoadModule env_module          {{ rawx_httpd_moduledir }}/mod_env.so
{% if ansible_os_family == 'RedHat' %}
LoadModule unixd_module        {{ rawx_httpd_moduledir }}/mod_unixd.so
LoadModule log_config_module   {{ rawx_httpd_moduledir }}/mod_log_config.so
LoadModule logio_module        {{ rawx_httpd_moduledir }}/mod_logio.so
{% endif %}

Alias / /x/

Listen          {{ openio_rawx_bind_address }}:{{ openio_rawx_bind_port }}
PidFile         {{ openio_rawx_pid_directory }}/{{ openio_rawx_namespace }}-{{ openio_rawx_servicename }}-httpd.pid
ServerRoot      /var/lib/oio/sds/{{ openio_rawx_namespace }}/coredump
ServerName      localhost
ServerSignature Off
ServerTokens    Prod
DocumentRoot    {{ openio_rawx_volume }}
TypesConfig     /etc/mime.types

User  openio
Group openio

SetEnv INFO_SERVICES OIO,{{ openio_rawx_namespace }},rawx,{{ openio_rawx_serviceid }}
SetEnv LOG_TYPE access
SetEnv LEVEL INF
SetEnv HOSTNAME {{ ansible_fqdn }}

SetEnvIf Remote_Addr "^" log-cid-out=1
SetEnvIf Remote_Addr "^" log-cid-in=0
SetEnvIf Request_Method "PUT" log-cid-in=1
SetEnvIf Request_Method "PUT" !log-cid-out
SetEnvIf log-cid-in 0 !log-cid-in
{% raw %}
LogFormat "%{%b %d %T}t %{HOSTNAME}e %{INFO_SERVICES}e %{pid}P %{tid}P %{LOG_TYPE}e %{LEVEL}e %{Host}i %a:%{remote}p %m %>s %D %I %{x-oio-chunk-meta-container-id}i %{x-oio-req-id}i %U" log/cid-in
LogFormat "%{%b %d %T}t %{HOSTNAME}e %{INFO_SERVICES}e %{pid}P %{tid}P %{LOG_TYPE}e %{LEVEL}e %{Host}i %a:%{remote}p %m %>s %D %O %{x-oio-chunk-meta-container-id}o %{x-oio-req-id}i %U" log/cid-out
{% endraw %}
ErrorLog /var/log/oio/sds/{{ openio_rawx_namespace }}/{{ openio_rawx_servicename }}/{{ openio_rawx_servicename }}-httpd-errors.log
SetEnvIf Request_URI "/(stat|info)$" nolog=1

SetEnvIf nolog 1 !log-cid-out
SetEnvIf nolog 1 !log-cid-in

CustomLog /var/log/oio/sds/{{ openio_rawx_namespace }}/{{ openio_rawx_servicename }}/{{ openio_rawx_servicename }}-httpd-access.log log/cid-out env=log-cid-out
CustomLog /var/log/oio/sds/{{ openio_rawx_namespace }}/{{ openio_rawx_servicename }}/{{ openio_rawx_servicename }}-httpd-access.log log/cid-in  env=log-cid-in

<IfModule worker.c>
MaxRequestsPerChild {{ openio_rawx_mpm_max_requests_per_child }}
MaxSpareThreads {{ openio_rawx_mpm_max_spare_threads }}
MinSpareThreads {{ openio_rawx_mpm_min_spare_threads }}
ServerLimit {{ openio_rawx_mpm_server_limit }}
StartServers {{ openio_rawx_mpm_start_servers }}
ThreadsPerChild {{ openio_rawx_mpm_threads_per_child }}
</IfModule>


DavDepthInfinity Off

grid_docroot    {{ openio_rawx_volume }}
# How many hexdigits must be used to name the indirection directories
grid_hash_width  {{ openio_rawx_hash_width }}
# How many levels of directories are used to store chunks
grid_hash_depth {{ openio_rawx_hash_depth }}
# At the end of an upload, perform a fsync() on the chunk file itself
grid_fsync      {{ openio_rawx_fsyncÂ }}
# At the end of an upload, perform a fsync() on the directory holding the chunk
grid_fsync_dir  {{ openio_rawx_fsync_dir }}
# Preallocate space for the chunk file (enabled by default)
#grid_fallocate enabled
# Enable compression ('zlib' or 'lzo' or 'off')
grid_compression {{ openio_rawx_compression }}
grid_namespace  {{ openio_rawx_namespace }}
grid_dir_run    {{ openio_rawx_pid_directory }}

<Directory />
DAV rawx
AllowOverride None
Require all granted
Options -SymLinksIfOwnerMatch -FollowSymLinks -Includes -Indexes
</Directory>

<VirtualHost {{ openio_rawx_bind_address }}:{{ openio_rawx_bind_port }}>
# DO NOT REMOVE (even if empty) !
</VirtualHost>
